import torch
import torch.nn as nn
from torch.utils.data import Dataset

class DataSet(Dataset):
    def __init__(self, dataset, tokenizer_src, tokenizer_tgt, src_lang, tgt_lang, seq_len):
        super().__init__()
        self.seq_len = seq_len

        self.dataset = dataset
        self.tokenizer_src = tokenizer_src
        self.tokenizer_tgt = tokenizer_tgt
        self.src_lang = src_lang
        self.tgt_lang = tgt_lang

        self.sos_token = torch.tensor([tokenizer_src.token_to_id('[SOS]')], dtype=torch.long)
        self.eos_token = torch.tensor([tokenizer_src.token_to_id('[EOS]')], dtype=torch.long)
        self.pad_token = torch.tensor([tokenizer_src.token_to_id('[PAD]')], dtype=torch.long)

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        src_target_pair = self.dataset[idx]
        src_text = src_target_pair['translation'][self.src_lang]
        tgt_text = src_target_pair['translation'][self.tgt_lang]

        # converting text to tokens
        enc_input_tokens = torch.tensor([self.tokenizer_src.encode(src_text).ids], dtype=torch.long)
        dec_input_tokens = torch.tensor([self.tokenizer_tgt.encode(tgt_text).ids], dtype=torch.long)

        # calculating how many padding tokens we need to reach the seq_len
        # e.g : seq_len = 4 -> enc_input_tokens - > [5, 10] -> after adding SOS and EOS tokens -> [<SOS>, 5, 10, <EOS>] so we need to subtract those two tokens from the len of the sentence
        enc_num_padding_tokens = self.seq_len - len(enc_input_tokens) - 2

        # calculating how many padding token we need to reach the seq_len, for the decoder sentence input
        # this time we only add the <SOS> token to the start of the sentence because the <EOS> token should be generated by the model itself
        dec_num_padding_tokens = self.seq_len - len(dec_input_tokens) - 1

        # we need to make sure that the paddings are not negative because if they are, it means the sentence is too long or the seq_len is small
        if enc_num_padding_tokens < 0 or dec_num_padding_tokens < 0:
            raise ValueError('The number of padding tokens cannot be less than zero, the sentence is too long.')

        # adding the tokens
        encoder_input = torch.cat(
            [
                self.sos_token,
                enc_input_tokens,
                self.eos_token,
                torch.tensor([self.pad_token] * enc_num_padding_tokens, dtype=torch.long),
            ],
            dim = 0
        )


        decoder_input = torch.cat(
            [
                self.sos_token,
                dec_input_tokens,
                self.eos_token,
                torch.tensor([self.pad_token] * dec_num_padding_tokens, dtype=torch.long),
            ],
            dim = 0
        )

        label = torch.cat(
            [
                dec_input_tokens,
                self.eos_token,
                torch.tensor([self.pad_token] * dec_num_padding_tokens, dtype=torch.int64),
            ],
            dim = 0
        )

        assert encoder_input.size(0) == self.seq_len
        assert decoder_input.size(0) == self.seq_len
        assert label.size(0) == self.seq_len

        return {
            "encoder_input": encoder_input,  # (seq_len)
            "decoder_input": decoder_input,  # (seq_len)
            "encoder_mask": (encoder_input != self.pad_token).unsqueeze(0).unsqueeze(0).int(), # (1, 1, seq_len)
            "decoder_mask": (decoder_input != self.pad_token).unsqueeze(0).int() & causal_mask(decoder_input.size(0)), # (1, seq_len) & (1, seq_len, seq_len),
            "label": label,  # (seq_len)
            "src_text": src_text,
            "tgt_text": tgt_text,
        }

def casual_mask(size):
    # remove the upper triangle of the matrix
    mask = torch.triu(torch.ones(1, size, size), diagonal=1).type(torch.int)
    # returning the positions where no mask is needed (allow positions)
    return mask == 0